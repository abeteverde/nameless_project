#this is a to do list for NAMELESSPROJECT project (referred name will also be BRACCIADICERA, this names will probably be changed).

#italian:

0.0 --> 1.0 sviluppo su twitter.
1.0 --> 2.0 sviluppo su telegram.
2.0 --> 3.0 ??


lista generica:
 {
  # valutare l'ordine delle voci qui di seguito:
  
  1- scegliere un nome per il progetto. --> fissare un momento per un brainstorming. --> caricare il nuovo progetto su github.
    a- scegliere dei nomi per le varie release.
  2- dividerci i vari compiti.
  3- studiare per bene python.
  4- creare la documentazione per il progetto hostato su github
  5- gestione opzioni di avvio con argparser.
  
  ottimizzare il main.
  Spostare i token di autenticazione dell'app in un file di configurazione salvato in binario.
  
  6- ottenere i permessi in scrittura per la nostra app (serve un numero di telefono).
  7- mandare il primo tweet.
  8- gestire la lista dei tweet restituiti da search.
  9- rispondere ai tweet.
    a- aggiungere dei contatori (e.g. uptime, numero di tweet, ora).
    b- frasi e citazioni più o meno idiote.
 10- separare le funzioni di controllo della timeline da quelle di risposta (fork e processing in parallelo), cosicchè non ci siano ritardi nella ripetizione del ciclo main (il ritardo è proporzionale al numero di tweet ai quali il bot dovrà rispondere). #inoltre il main loop risulterebbe più ordinato e chiaro da leggere.  
 11- studiare il modulo per gestire i file di configurazione.
    a- scrivere un file di configurazione.
    b- documentarsi per capire qual è il posto migliore per salvare questo tipo file.
    c- gestire il caso in cui non trova un file di config  #dovrebbe notificare la mancanza 
      	del file e crearne uno nuovo con i campi (possibilmente commentati) già ordinati da compilare.

#ver 0.1

  12- tweet di avvio.
  13- creare un main loop che tenga attivo il programma.

#ver 0.2

  14- controllo del bot tramite tweet specifici (e.g. "come stanno i tuoi contatori?"-->"bene, numero tweet:xx, uptime:xx...").
      - lista di utenti (@) che possono comandare il bot via twitter.
      - tweet che spegne/sospende il bot. (e.g. "risposte=0"-->"smetto di rispondere ai vostri tweet, in attesa di ordini").
    
#ver 0.3

  - 
  
  
  - 
  
#ver 1.0 --> arriva telegram.

#elementi da ordinare ed aggiungere alla lista sopra:
   {
    - gestire e decidere come e dove salvare le chiavi di autenticazione.
    
    - aggiornare la sezione che chiede all'utente di autenticarsi e di copiare le due stringhe. leggere qui: http://thomassileo.com/blog/2013/01/25/using-twitter-rest-api-v1-dot-1-with-python/
    
    - gestione crash
       - script che controlla se il programma è in esecuzione (cron) --> documentarsi.
       - all'accensione twitta che è attivo e legge se nel file di log è riportato un crash ed eventualmente twitta anche quello.
       - salvare le variabili (autenticazione, contatori vari (n tweet, crash, uptime, ultimi id dei tweet letti e dei messaggi diretti) in un file per evitare di perderle in caso di crash.
      
    - vari tweet stupidi (avvio, crash, ecc ecc)
    
    - avvisi prima di superare i limiti imposti da twitter #nel nostro caso non sarà facile arrivare a quelle cifre, ma non si sa mai...
    
        
   }
 }

feature da aggiungere e idee più o meno fattibili (sintesi):  #aggiungete qui tutto quello che vi viene in mente
 {
  1-
  2-
  3-
  
  #elementi da ordinare ed aggiungere alla lista sopra:
   {
    
    gestione crash.
    contatori vari (n tweet, crash, uptime, ultimi id dei tweet letti e dei messaggi diretti).
    collegare il bot ad arduino e farli comunicare (utile dal punto di vista didattico perchè probabilmente arduino sarà programmato in c e il nostro bot in python.).
     
   }
 }



the project is hosted on github (link)

developers:

franzbertani
cerix
abeteverde
